#![allow(unused)]
use serde::{Deserialize, Serialize};
use strum::EnumIter;

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, EnumIter, Serialize, Deserialize)]
pub enum KeyCode {
    None,
    Key0,
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    KeyA,
    KeyB,
    KeyC,
    KeyD,
    KeyE,
    KeyF,
    KeyG,
    KeyH,
    KeyI,
    KeyJ,
    KeyK,
    KeyL,
    KeyM,
    KeyN,
    KeyO,
    KeyP,
    KeyQ,
    KeyR,
    KeyS,
    KeyT,
    KeyU,
    KeyV,
    KeyW,
    KeyX,
    KeyY,
    KeyZ,
    /*NumPad0,
    NumPad1,
    NumPad2,
    NumPad3,
    NumPad4,
    NumPad5,
    NumPad6,
    NumPad7,
    NumPad8,
    NumPad9,
    NumPadDivide,
    NumPadMultiply,
    NumPadMinus,
    NumPadPlus,
    NumPadEnter,
    NumPadDecimal,
    LeftBracket,
    RightBracket,
    Semicolon,
    Apostrophe,
    Backquote,
    Comma,
    Period,
    Slash,
    Backslash,
    Minus,
    Equal,
    Enter,
    Space,
    Backspace,*/
    Tab,
    CapsLock,
    /*NumLock,
    Escape,
    ScrollLock,
    Insert,
    Delete,
    Home,
    End,
    PageUp,
    PageDown,
    Break,*/
    LeftShift,
    //RightShift,
    LeftAlt,
    //RightAlt,
    LeftControl,
    /*RightControl,
    LeftWin,
    RightWin,
    App,
    ArrowUp,
    ArrowLeft,
    ArrowDown,
    ArrowRight,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    CapsLockToggle,
    NumLockToggle,
    ScrollLockToggle,*/
    MouseLeft = 317,
    MouseRight,
    MouseMiddle,
    Mouse4,
    Mouse5,
    MouseWheelUp,
    MouseWheelDown,
}

impl KeyCode {
    fn from_string(input: &str) -> Option<KeyCode> {
        match input {
            "None" => Some(KeyCode::None),
            "Key0" => Some(KeyCode::Key0),
            "Key1" => Some(KeyCode::Key1),
            "Key2" => Some(KeyCode::Key2),
            "Key3" => Some(KeyCode::Key3),
            "Key4" => Some(KeyCode::Key4),
            "Key5" => Some(KeyCode::Key5),
            "Key6" => Some(KeyCode::Key6),
            "Key7" => Some(KeyCode::Key7),
            "Key8" => Some(KeyCode::Key8),
            "Key9" => Some(KeyCode::Key9),
            "KeyA" => Some(KeyCode::KeyA),
            "KeyB" => Some(KeyCode::KeyB),
            "KeyC" => Some(KeyCode::KeyC),
            "KeyD" => Some(KeyCode::KeyD),
            "KeyE" => Some(KeyCode::KeyE),
            "KeyF" => Some(KeyCode::KeyF),
            "KeyG" => Some(KeyCode::KeyG),
            "KeyH" => Some(KeyCode::KeyH),
            "KeyI" => Some(KeyCode::KeyI),
            "KeyJ" => Some(KeyCode::KeyJ),
            "KeyK" => Some(KeyCode::KeyK),
            "KeyL" => Some(KeyCode::KeyL),
            "KeyM" => Some(KeyCode::KeyM),
            "KeyN" => Some(KeyCode::KeyN),
            "KeyO" => Some(KeyCode::KeyO),
            "KeyP" => Some(KeyCode::KeyP),
            "KeyQ" => Some(KeyCode::KeyQ),
            "KeyR" => Some(KeyCode::KeyR),
            "KeyS" => Some(KeyCode::KeyS),
            "KeyT" => Some(KeyCode::KeyT),
            "KeyU" => Some(KeyCode::KeyU),
            "KeyV" => Some(KeyCode::KeyV),
            "KeyW" => Some(KeyCode::KeyW),
            "KeyX" => Some(KeyCode::KeyX),
            "KeyY" => Some(KeyCode::KeyY),
            "KeyZ" => Some(KeyCode::KeyZ),
            /*"NumPad0" => Some(KeyCode::NumPad0),
            "NumPad1" => Some(KeyCode::NumPad1),
            "NumPad2" => Some(KeyCode::NumPad2),
            "NumPad3" => Some(KeyCode::NumPad3),
            "NumPad4" => Some(KeyCode::NumPad4),
            "NumPad5" => Some(KeyCode::NumPad5),
            "NumPad6" => Some(KeyCode::NumPad6),
            "NumPad7" => Some(KeyCode::NumPad7),
            "NumPad8" => Some(KeyCode::NumPad8),
            "NumPad9" => Some(KeyCode::NumPad9),
            "NumPadDivide" => Some(KeyCode::NumPadDivide),
            "NumPadMultiply" => Some(KeyCode::NumPadMultiply),
            "NumPadMinus" => Some(KeyCode::NumPadMinus),
            "NumPadPlus" => Some(KeyCode::NumPadPlus),
            "NumPadEnter" => Some(KeyCode::NumPadEnter),
            "NumPadDecimal" => Some(KeyCode::NumPadDecimal),
            "LBracket" => Some(KeyCode::LeftBracket),
            "RBracket" => Some(KeyCode::RightBracket),
            "Semicolon" => Some(KeyCode::Semicolon),
            "Apostrophe" => Some(KeyCode::Apostrophe),
            "Backquote" => Some(KeyCode::Backquote),
            "Comma" => Some(KeyCode::Comma),
            "Period" => Some(KeyCode::Period),
            "Slash" => Some(KeyCode::Slash),
            "Backslash" => Some(KeyCode::Backslash),
            "Minus" => Some(KeyCode::Minus),
            "Equal" => Some(KeyCode::Equal),
            "Enter" => Some(KeyCode::Enter),
            "Space" => Some(KeyCode::Space),
            "Backspace" => Some(KeyCode::Backspace),*/
            "Tab" => Some(KeyCode::Tab),
            "CapsLock" => Some(KeyCode::CapsLock),
            /*"NumLock" => Some(KeyCode::NumLock),
            "Escape" => Some(KeyCode::Escape),
            "ScrollLock" => Some(KeyCode::ScrollLock),
            "Insert" => Some(KeyCode::Insert),
            "Delete" => Some(KeyCode::Delete),
            "Home" => Some(KeyCode::Home),
            "End" => Some(KeyCode::End),
            "PageUp" => Some(KeyCode::PageUp),
            "PageDown" => Some(KeyCode::PageDown),
            "Break" => Some(KeyCode::Break),*/
            "LShift" => Some(KeyCode::LeftShift),
            //"RShift" => Some(KeyCode::RightShift),
            "LAlt" => Some(KeyCode::LeftAlt),
            //"RAlt" => Some(KeyCode::RightAlt),
            "LControl" => Some(KeyCode::LeftControl),
            /*"RControl" => Some(KeyCode::RightControl),
            "LWin" => Some(KeyCode::LeftWin),
            "RWin" => Some(KeyCode::RightWin),
            "App" => Some(KeyCode::App),
            "ArrowUp" => Some(KeyCode::ArrowUp),
            "ArrowLeft" => Some(KeyCode::ArrowLeft),
            "ArrowDown" => Some(KeyCode::ArrowDown),
            "ArrowRight" => Some(KeyCode::ArrowRight),
            "F1" => Some(KeyCode::F1),
            "F2" => Some(KeyCode::F2),
            "F3" => Some(KeyCode::F3),
            "F4" => Some(KeyCode::F4),
            "F5" => Some(KeyCode::F5),
            "F6" => Some(KeyCode::F6),
            "F7" => Some(KeyCode::F7),
            "F8" => Some(KeyCode::F8),
            "F9" => Some(KeyCode::F9),
            "F10" => Some(KeyCode::F10),
            "F11" => Some(KeyCode::F11),
            "F12" => Some(KeyCode::F12),
            "CapsLockToggle" => Some(KeyCode::CapsLockToggle),
            "NumLockToggle" => Some(KeyCode::NumLockToggle),
            "ScrollLockToggle" => Some(KeyCode::ScrollLockToggle),*/
            "MouseLeft" => Some(KeyCode::MouseLeft),
            "MouseRight" => Some(KeyCode::MouseRight),
            "MouseMiddle" => Some(KeyCode::MouseMiddle),
            "Mouse4" => Some(KeyCode::Mouse4),
            "Mouse5" => Some(KeyCode::Mouse5),
            "MouseWheelUp" => Some(KeyCode::MouseWheelUp),
            "MouseWheelDown" => Some(KeyCode::MouseWheelDown),
            _ => None,
        }
    }

    pub fn u64(self) -> u64 {
        self as u64
    }
}
